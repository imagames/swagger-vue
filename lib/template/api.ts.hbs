/* eslint-disable */
import axios, { AxiosInstance, AxiosRequestConfig, AxiosPromise } from 'axios'
import qs from 'qs'

let domain = ''
let _axios: AxiosInstance = axios

interface Dict {
  [key: string]: any
}
type Optional<T> = T | undefined

interface CallParams extends Dict{
  $domain?: string;
  $config?: AxiosRequestConfig;
  $queryParameters?: Dict;
}

enum RequestMethod {
  GET = 'get',
  POST = 'post',
  PUT = 'put',
  PATCH = 'patch',
  DELETE = 'delete',
  HEAD = 'head'
}

export function getDomain(): string {
  return domain
}

export function setDomain($domain: string) {
  domain = $domain
}

export function setAxios($axios: AxiosInstance) {
  _axios = $axios
}

const defaultSerializer = (params: any) => qs.stringify(params)

export function request(method: RequestMethod, url: string, body: Optional<string>, queryParameters: object, form: object, config: Optional<AxiosRequestConfig>): AxiosPromise {
  const serializer = config?.paramsSerializer ?? defaultSerializer
  const keys = Object.keys(queryParameters)
  let queryUrl = url
  if (keys.length > 0) {
    queryUrl = url + '?' + serializer(queryParameters)
  }
  switch (method) {
    case RequestMethod.GET:
      return _axios.get(queryUrl, {params: form, ...config})
    case RequestMethod.DELETE:
    case RequestMethod.HEAD:
      return _axios[method](queryUrl, config)
    default:
      if (body) {
        return _axios[method](queryUrl, body, config)
      } else {
        return _axios[method](queryUrl, serializer(form), config)
      }
  }
}

{{> methods }}
